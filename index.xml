<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bouncy GPG</title>
    <link>https://neuhalje.github.io/bouncy-gpg/</link>
    <description>Recent content on Bouncy GPG</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright (c) 2017 - , Jens Neuhalfen; all rights reserved.</copyright>
    <lastBuildDate>Sun, 20 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://neuhalje.github.io/bouncy-gpg/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About Bouncy GPG</title>
      <link>https://neuhalje.github.io/bouncy-gpg/about/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://neuhalje.github.io/bouncy-gpg/about/</guid>
      <description>Bouncy GPG is a java library that provides an opinionated API for cryptographic use cases. It also strives to provide the best documentation for programmers to solve problems without shooting theirselves in the foot.
Bouncy GPG is licensed under the very permissive .
Learn more and contribute on GitHub.
The website is generated with hugo and the beautiful docdock theme.
All code samples are actually executed at build time by concordion and the concordion-api-documentation-extension.</description>
    </item>
    
    <item>
      <title>Example: Converting a password into a cryptographic key</title>
      <link>https://neuhalje.github.io/bouncy-gpg/howto/keys/passwords/example/convertingpasswordsintocryptographickeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://neuhalje.github.io/bouncy-gpg/howto/keys/passwords/example/convertingpasswordsintocryptographickeys/</guid>
      <description>The following code snippets are actually compiled and run during the BouncyGPG build process. This ensures that all examples are correct.
Usage with Bouncy-GPGCryptographic key derivation functions should be used to derive a key from a password (or any other source material). Bouncy-GPG uses SCrypt for key stretching.
The following snippet will derive a 256 bit key from a strong password. The derivation process is configured by SCryptKeyStretchingParameters.forStrongInputKeyMaterial(). This will give a very quick key derivation and is only secure because the password is very long and random.</description>
    </item>
    
    <item>
      <title>Example: Deriving record specific keys</title>
      <link>https://neuhalje.github.io/bouncy-gpg/howto/keys/kdf/example/derivingfromcryptographickeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://neuhalje.github.io/bouncy-gpg/howto/keys/kdf/example/derivingfromcryptographickeys/</guid>
      <description>The following code snippets are actually compiled and run during the BouncyGPG build process. This ensures that all examples are correct.
To derive another key from one (master key) a key derivation function should be used. HKDF defined in RFC5869 is such a function.
Internally HKDF uses an HMAC to derive multiple keys fro one master key.
To quote from RFC5869:
A key derivation function (KDF) is a basic and essential component of cryptographic systems.</description>
    </item>
    
    <item>
      <title>header</title>
      <link>https://neuhalje.github.io/bouncy-gpg/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://neuhalje.github.io/bouncy-gpg/_header/</guid>
      <description>Bouncy GPG Documentation</description>
    </item>
    
  </channel>
</rss>