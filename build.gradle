import name.neuhalfen.concordion.transform.ConcordionHtmlToMarkdownTransformer

buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'jacoco'

    // publish gh-pages
    id 'org.ajoberstar.git-publish' version '0.3.0'

    // deploy to maven central
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id "com.jfrog.bintray" version "1.7.3"
}



project.ext.set("specifications_concordion_target", "$reporting.baseDir/specs/concordion")

project.ext.set("specifications_prepareForCms_source", "$reporting.baseDir/specs/concordion/specs")
project.ext.set("specifications_prepareForCms_target", "$projectDir/cms/content/specification")

project.ext.set("specifications_cms_cmsdRoot", "$projectDir/cms")
project.ext.set("specifications_cms_target", "$buildDir/website")


sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'name.neuhalfen.projects.crypto.bouncycastle.openpgp'
version = '2.0.1'

repositories {
    jcenter()
}

dependencies {
    compile 'org.bouncycastle:bcprov-jdk15on:1.57'
    compile 'org.bouncycastle:bcpg-jdk15on:1.57'

    compile 'org.slf4j:slf4j-api:1.7.22'
    compile 'ch.qos.logback:logback-classic:1.2.1'

    // @Nullable and friends are not needed at runtime
    compile 'com.google.code.findbugs:jsr305:3.0.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-core:2.8.9'

    testCompile "org.concordion:concordion:2.1.0"
    testCompile 'org.concordion:concordion-api-documentation-extension:0.0.4'
}


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled = true
        html.destination "${buildDir}/jacocoHtml"
    }
}

check.dependsOn jacocoTestReport

test {
    // Code coverage
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }

    // Concordion
    // display test output on console? (for debugging)
    testLogging.showStandardStreams = false
    // write output to build/reports/spec
    systemProperties['concordion.output.dir'] = "${specifications_concordion_target}"
    // force tests to run even if code hasn't changed
    outputs.upToDateWhen { false }
}

// bintray deployment
// configured in gradle.properties

if (hasProperty('bintray_Username')) {
    apply from: 'bintray.gradle'
}
// Misc


task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

// Publish github pages

// Publishes the Concordion output to Github Pages
// https://github.com/ajoberstar/gradle-git-publish
// gradle publishDocs


task prepareForCMS(type: Copy, dependsOn: ['test']) {
    description 'Transform the build output of concordion to include it in the CMS'

    from(fileTree("${specifications_prepareForCms_source}")) {
        include '**/*.html'
    }

    into(file("${specifications_prepareForCms_target}"))

    //   rename(/.html$/,'.md')

    filter(ConcordionHtmlToMarkdownTransformer)
}

task removeOldWebsite(type: Delete) { 
  delete "${specifications_cms_target}"
} 

task generateWebsite(type: Exec, dependsOn: ['prepareForCMS', 'removeOldWebsite']) {
    commandLine = ['hugo', '--cleanDestinationDir', '--destination', "${specifications_cms_target}", '--enableGitInfo']
    workingDir = file("${specifications_cms_cmsdRoot}")
}

gitPublish {
    // where to publish to (repo must exist)
    repoUri = 'git@github.com:neuhalje/bouncy-gpg.git'
    // branch will be created if it doesn't exist
    branch = 'gh-pages'

    // generally, you don't need to touch this
    // repoDir = file("$buildDir/gitPublish")

    // what to publish, this is a standard CopySpec
    contents {
        from "${specifications_cms_target}"
    }

    // what to keep in the existing branch (include=keep)
    preserve {
        include '1.0.0/**'
        exclude '1.0.0/temp.txt'
    }

    // message used when committing changes
    commitMessage = 'Publishing github pages' // defaults to 'Generated by gradle-git-publish'
}


task publishWebsite(dependsOn: ['generateWebsite', 'gitPublishPush'])
